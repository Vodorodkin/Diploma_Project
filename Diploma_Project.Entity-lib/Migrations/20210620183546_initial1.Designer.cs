// <auto-generated />
using System;
using Diploma_Project.Entity_lib.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Diploma_Project.Entity_lib.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20210620183546_initial1")]
    partial class initial1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOperation")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOperationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TypeOperationId");

                    b.HasIndex("UserId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDateOrder")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<bool>("PayMark")
                        .HasColumnType("bit");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PointId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.ShopCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ShopCartName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ShopCarts");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.ShopCartProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ShopCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShopCartId");

                    b.ToTable("ShopCartProducts");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressOfOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressOfPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KPP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RSch")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.TypeOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeOperations");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NumberPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasFilter("[Login] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Client", b =>
                {
                    b.HasBaseType("Diploma_Project.Entity_lib.Models.User");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Manager", b =>
                {
                    b.HasBaseType("Diploma_Project.Entity_lib.Models.User");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Seller", b =>
                {
                    b.HasBaseType("Diploma_Project.Entity_lib.Models.User");

                    b.Property<int>("PointId")
                        .HasColumnType("int");

                    b.HasIndex("PointId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Operation", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma_Project.Entity_lib.Models.TypeOperation", "TypeOperation")
                        .WithMany("OperationWithProducts")
                        .HasForeignKey("TypeOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma_Project.Entity_lib.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("TypeOperation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Order", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("Diploma_Project.Entity_lib.Models.Store", "Point")
                        .WithMany()
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma_Project.Entity_lib.Models.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma_Project.Entity_lib.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Point");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.OrderProduct", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma_Project.Entity_lib.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Product", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.ShopCart", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.Client", "Client")
                        .WithMany("ShopCarts")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.ShopCartProduct", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.Product", "Product")
                        .WithMany("ShopCartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Diploma_Project.Entity_lib.Models.ShopCart", "ShopCart")
                        .WithMany("ShopCartProducts")
                        .HasForeignKey("ShopCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShopCart");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Client", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Diploma_Project.Entity_lib.Models.Client", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Manager", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Diploma_Project.Entity_lib.Models.Manager", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Seller", b =>
                {
                    b.HasOne("Diploma_Project.Entity_lib.Models.User", null)
                        .WithOne()
                        .HasForeignKey("Diploma_Project.Entity_lib.Models.Seller", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Diploma_Project.Entity_lib.Models.Store", "Point")
                        .WithMany("Sellers")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Point");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Product", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("ShopCartProducts");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.ShopCart", b =>
                {
                    b.Navigation("ShopCartProducts");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Status", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Store", b =>
                {
                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.TypeOperation", b =>
                {
                    b.Navigation("OperationWithProducts");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Diploma_Project.Entity_lib.Models.Client", b =>
                {
                    b.Navigation("ShopCarts");
                });
#pragma warning restore 612, 618
        }
    }
}
